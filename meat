#!/bin/bash

################################################################################
# MEAT!!!! simple fast AUR helper, using cower as a back end                   #
################################################################################
# Copyright Daniel Mills <danielmills1@gmail.com>                              #
# Wraps 'cower', Copyright Dave Reisner <d@falconindy.com>                     #
#                                                                              #
# Permission is hereby granted, free of charge, to any person obtaining a copy #
# of this software and associated documentation files (the "Software"), to     #
# deal in the Software without restriction, including without limitation the   #
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or  #
# sell copies of the Software, and to permit persons to whom the Software is   #
# furnished to do so, subject to the following conditions:                     #
#                                                                              #
# The above copyright notice and this permission notice shall be included in   #
# all copies or substantial portions of the Software.                          #
#                                                                              #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR   #
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,     #
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  #
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER       #
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING      #
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS #
# IN THE SOFTWARE.                                                             #
#                                                                              #
# Requires bash4, cower-git, awk                                               #
# Optional deps: git (for handling automatic checking of git pkgs)             #
#                pacman-color (for colorized pacman output)                    #
#                sudo (highly recommended)                                     #
################################################################################
# TODO:                                                                        #
#       find a better way to handle .install files?                            #
#       write documentation                                                    #
#         make note of default overwriting of existing package dirs            #
#           specify that an alternate target should be used                    #
#         mention that it's recommended to -Syu before installing              #
#       figure out a better way to handle checking for git updates             #
#         handle other VCS systems in the same way                             #
#       find and eliminate redundancies                                        #
#       attempt to minimize calls to pacman, or make it less "interactive"     #
#       !!!!!efficiency!!!!!                                                   #
#       all kinds of shit :(                                                   #
################################################################################
### Declarations

shopt -s extglob dotglob globstar nullglob

### files
config_file=${XDG_CONFIG_HOME:-$HOME/.config}/meat/config # config file
cache_dir=${XDG_CACHE_HOME:-$HOME/.cache}/meat            # cache dir
git_sums_file=$cache_dir/gitsums          # git checksums file
lock_file=$cache_dir/meat.lck             # lock file

### default values
gitcheck=1                      # boolean, '1' to check git for updates
verbosity=1                     # integer, verbosity level
color=never                     # string, {always,auto,never}
iscolor=(0 0)                   # array, '1' for color on stdout,stderr
t_download_dir=$(mktemp -d)     # tmp target directory for PKGBUILDs, etc
download_dir=$t_download_dir    # will be set for user-specified dir
isuserddir=0                    # boolean, will be set if above is set
gitcheck_dir=$(mktemp -d)       # target directory for git cloning

### default programs
cower=(cower)          # array, cower command and opts
makepkg=(makepkg)      # array, makepkg command and opts
pacman=(pacman)        # array, pacman command and opts

### global variables
# color handling
red=$(tput bold; tput setaf 1)      # bold red
green=$(tput bold; tput setaf 2)    # bold green
yellow=$(tput bold; tput setaf 3)   # bold yellow
blue=$(tput bold; tput setaf 4)     # bold blue
bold=$(tput bold)                   # bold white
reset=$(tput sgr0)                  # reset colors

### option handling
# operations
download=0           # boolean, set for --download
full_update=0        # boolean, set for hidden --fullupdate operation
git_db_update=0      # boolean, set for --git-db-update
info_level=0         # integer, for how many '-i's to pass to cower
                       # also used for checking for --info
msearch=0            # boolean, set for --msearch
op_declared=0        # boolean, if 1 an option has been specified
search=0             # boolean, set for --search
update=0             # boolean, set for --update
sign=0               # boolean, set for --sign
forcenosign=0        # boolean, set for --nosign

# options
addignore=()       # array, used to turn CSV into an array
group_ignore=()    # array, groups to ignore
ignore=()          # array, pkgs to ignore
options=()         # array, opts, used to prepare opts for parsing
optarg=            # used for parsing --foo=bar options
repo_ignore=()     # array, repos to ignore
check_git=0        # boolean, if 1 --git-check has been specified
check_all=0        # boolean, if 1 --check-all has been specified
force=0            # boolean, if 1 --force has been specified
nossl=0            # boolean, if 1 --nossl has been specified
threads=10         # integer, number of threads for cower to create
timeout=10         # integer, cower's timeout time in seconds

### stuff to download
declare -A checked_gits=()  # associative array, key is name, val is sum
cow_targets=()              # stack, list of cower targets
final_cow_targets=()        # array, cower targets in correct order
git_ignore=()               # array, list of packages to ignore for git
pac_targets=()              # array, list of pacman targets
targets=()                  # array, full list of targets
stack_size=0                # integer, size of cow_targets stack
pkg=                        # used when parsing options

################################################################################
### Functions

## build and install AUR packages
# usage: aur_install "target dir" "targets"
aur_install() {
  local pkg newsum toinst pkgs pkgext
  hide 4 pushd "$download_dir" || die "could not cd to \`$download_dir'"

  # build and install
  for pkg; do
    hide 4 pushd "$pkg" || { 
      err "error while changing to dir \`$pkg'"; continue
    }

    ## allow user to check files
    checkfiles "$pkg"

    ## build and install package
    until "${makepkg[@]}" -f; do
      confirm "error making package \`$pkg', try again?" || exit
      checkfiles "$pkg"
    done

    # check if package is explicit, or installed as a dep, install accordingly
    info 1 "Installing \`$pkg'..."
    # get PKGEXT from makepkg.conf
    IFS= read -rd '' pkgext < <(source /etc/makepkg.conf &&
                                printf '%s\0' "$PKGEXT")
    if [[ -z $pkgext ]]; then
      die 'error: missing /etc/makepkg.conf, or PKGEXT unset/empty'
    fi
    pkgs=(*"$pkgext")
    if ((! ${#pkgs[@]})); then
      die "error: no package file seems to have been created"
    elif ((${#pkgs[@]} == 1)); then
      toinst=$pkgs
    else
      IFS= read -rd '' toinst < <(printf '%s\0' "${pkgs[@]}" | sort -Vrz)
    fi
    if inarray "$pkg" "${targets[@]}"; then
      hide 1 runasroot "${pacman[@]}" -U "$toinst" || {
        hide 4 popd
        err "something went wrong while installing \`$pkg'"
        continue
      }
    else
      hide 1 runasroot "${pacman[@]}" -U --asdeps "$toinst" || {
        hide 4 popd
        err "something went wrong while installing \`$pkg'"
        continue
      }
    fi

    # if package is git, update sums file
    ((check_git)) && [[ $pkg = *-git ]] || { hide 4 popd; continue; }
    if [[ ${checked_gits[$pkg]} ]]; then
      git_addsum "$pkg" "${checked_gits[$pkg]}"
    else
      inarray "$pkg" "${git_ignore[@]}" && { hide 4 popd; continue; }
      { newsum=$(git_getsum "$pkg" 3>&1 >&4-); } 4>&1 || {
        hide 4 popd
        continue
      }
      git_addsum "$pkg" "$newsum"
    fi

    hide 4 popd
  done
  hide 4 popd
}

### allow user to check PKGBUILD, .install, and other files
# usage: checkfiles "package"
checkfiles() {
  local install file pkg=$1

  ## allow user to edit PKGBUILD and $install
  confirm "Edit PKGBUILD for \`$pkg'?" && ${EDITOR:-vi} PKGBUILD

  # source PKGBUILD for $install, prompt if exists
  source PKGBUILD
  if [[ $install ]]; then
    confirm "Edit \`$install'?" && ${EDITOR:-vi} "$install"
  fi

  # allow for checking every other regular file
  if ((check_all)); then
    for file in ./**/!(PKGBUILD|"$install"); do
      if [[ -f $file && -w $file && $(file "$file") = *text ]]; then
        confirm "Edit \`$file'?" && ${EDITOR:-vi} "$file"
      fi
    done
  fi
}

### clean up, clean up, everybody everywhere!
cleanup() {
  rm -rf "$gitcheck_dir" "$tmp"
  ((isuserddir)) || rm -rf "$download_dir"
}
    
## ask for confirmation
# usage: confirm "message"
confirm() {
  local -l reply        # convert to lowercase on assignment

  # make sure stdin is a terminal
  [[ -t 0 ]] || exec </dev/tty

  # actually print the prompt, return according to response
  read -p "$bold$1$reset [Y/n] " reply >/dev/tty
  [[ -z $reply || $reply = y?(es) ]]
}

## print error message, exit
# usage: die "messages"
die() { 
  if ((iscolor[1])); then
    printf "$red%s:$reset" "error"
  else
    printf "$bold%s:$reset" "error"
  fi
  printf "\t %s\n" "$@"
  exit 1
} >&2

## download packages, parse cower output for dependency info
# usage: download "targets"
download() {
  local flag pkg info
  info 1 'Cower is downloading packages...'

  # parse cower output, add to stacks
  while read -r flag pkg info; do
    case $flag in
      S) push "$pkg"; info 2 "$info";;
      W) pacadd "$pkg"; info 2 "$info";;
      E) err "$pkg $info";;
      *) err "cower: $flag $pkg $info";;
    esac
  done < <("${cower[@]}" -ddbf "$@" 2>&1)
}

## print error, skip if -f is supplied, else die
# usage: err "messages"
err() {
  if ((force)); then
    warn 1 "$@"
  else
    die "$@"
  fi
}

## update the git_sums_file for a given package
# usage: git_addsum "name" "sum"
git_addsum() {
  local name=$1 sum=$2
  tmp=$(mktemp) || die "error creating temp file"
  {
    awk -v name="$name" '$1 != name' "$git_sums_file"
    printf "%s %s\n" "$name" "$sum"
  } >"$tmp" && mv "$tmp" "$git_sums_file"
}

## shallow git clone, rev parse, return current sum
# usage: { sum=$(git_getsum "$pkg" 3>&1 >&4-); } 4>&1
# (aka capture fd 3, leave stdout and stderr intact)
git_getsum() {
  local pkg=$1 newsum _gitroot _gitname

  # delete existing build directories to avoid conflicts
  info 3 "checking for \`$pkg' directory, deleting if it exists"
  [[ -d $gitcheck_dir/$pkg ]] && rm -rf "$gitcheck_dir/$pkg"

  # source PKGBUILD, get git source
  info 3 "sourcing PKGBUILD for \`$pkg'"
  if [[ ! -r $download_dir/$pkg/PKGBUILD ]]; then
    hide 2 "${cower[@]}" -d "$pkg" || {
      warn 1 "error downloading PKGBUILD for \`$pkg', skipping"
      return 1
    }
  fi
  source "$download_dir/$pkg/PKGBUILD" || {
    warn 1 "error sourcing PKGBUILD for \`$pkg', skipping"
    return 1
  }
      
  # create directory to check git packages, change to dir
  mkdir -p "$gitcheck_dir" && hide 4 pushd "$gitcheck_dir" ||
    die "error creating gitcheck directory \`$gitcheck_dir'"

  # shallow git clone
  info 2 "cloning git repo for \`$pkg'"
  hide 2 git clone --depth 1 "$_gitroot" "$_gitname" || {
    hide 4 popd
    warn 1 "$_gitname not found in github, check \`$_gitroot', skipping"
    return 1
  }

  # get current md5sum
  if hide 4 pushd "$_gitname"; then
    newsum=$(git rev-parse origin) || {
      warn 1 "error getting md5sum for \`$pkg', skipping"
      return 1
    }
    hide 4 popd && rm -rf "$_gitname" &>/dev/null
  else
    hide 4 popd
    warn 1 "error changing dir for \`$pkg', skipping"
    return 1
  fi

  hide 4 popd
  # output sum
  printf '%s' "$newsum" >&3
}

### check if installed git packages are up to date
gitcheck() {
  local pkg tmp
  local newsum oldsum name sum

  # check for updates
  for pkg; do
    # skip ignored packages
    inarray "$pkg" "${git_ignore[@]}" && continue

    # get old md5sum from file
    oldsum=$(awk -v name="$pkg" '$1 == name{print $2}' "$git_sums_file") ||
      continue

    # get new/current md5sum
    { newsum=$(git_getsum "$pkg" 3>&1 >&4-); } 4>&1 || continue

    # compare sums
    if [[ $oldsum = "$newsum" ]]; then
      info 1 "\`$pkg' is up to date"
      continue
    fi

    # this stuff is only done if the md5sums don't match
    info 1 "\`$pkg' is out of date, updating" 
    if ((update)); then
      targets+=("$pkg")
      checked_gits["$pkg"]=$newsum
    else
      git_addsum "$pkg" "$newsum"
    fi
  done
}

## run command, suppressing output according to verbosity
# usage: hide 'verbosity' "command"
hide() {
  local v=$1; shift
  if ((verbosity >= v)); then
    "$@"
  else
    "$@" &>/dev/null
  fi
}

## checks if "$needle" is in "${haystack[@]}"
# usage: inarray "$needle" "${haystack[@]}"
inarray() {
  local val needle=$1; shift
  for val; do
    [[ $needle = "$val" ]] && return
  done
  return 1
}

## print info message
# usage: info 'verbosity' "messages"
info() {
  local v=$1; shift
  ((verbosity >= v)) || return
  printf "$bold"; printf "%s\n" "$@"; printf "$reset"
}

### install everything in "${targets[@]}"
install_all() {
  ((${#targets[@]})) || {
    info 1 "there is nothing to do"
    exit 0
  }

  # download targets, or put in the pacman targets array
  download "${targets[@]}"

  # print lists of targets
  if ((${#cow_targets[@]} || ${#pac_targets[@]})); then
    ((${#pac_targets[@]})) && {
      print_targets "blue" "Repo Targets" "${pac_targets[@]}"
    }
    ((${#cow_targets[@]})) && {
      print_targets "green" "AUR Targets" "${cow_targets[@]}"
    } 
    echo; confirm "Proceed with installation?" || exit 0
  else
    exit 0
  fi

  # install targets in repos
  ((${#pac_targets[@]})) && pac_install "${pac_targets[@]}"

  ## install AUR targets
  # pop values from stack, make array in the correct order
  while ((stack_size--)); do
    final_cow_targets+=("$(pop)")
  done
  # install AUR targets
  ((${#final_cow_targets[@]})) && aur_install "${final_cow_targets[@]}"
}

## add value to pacman list
# usage pacadd 'value'
pacadd() {
  pac_targets+=("$@")
}

## install pacman packages
# usage: pac_install "targets"
pac_install() {
  local -a explicits
  local pkg
  hide 1 runasroot "${pacman[@]}" -S --asdeps "$@"
  for pkg; do
    inarray "$pkg" "${targets[@]}" && explicits+=("$pkg")
  done
  info 2 "changing packages specified explicitly to have the correct properties"
  hide 2 runasroot "${pacman[@]}" -D --noconfirm --as-explicit "${explicits[@]}"
}

## pop value from top of stack
# usage: value=$(pop)
pop() {
  ((stack_size >= 0)) || return
  printf "%s" "${cow_targets[stack_size]}"
}

## print target list
# usage: print_targets "color" "title" "targets"
print_targets() {
  local col=$1 name=$2; shift 2
  local title="$name ($#): "
  local width=$(($(tput cols)-${#title}))
  local i=0
  echo
  
  # print title
  if ((iscolor[0])); then
    printf "${!col}%s$reset" "$title"
  else
    printf "$bold%s$reset" "$title"
  fi

  # print list, indented properly
  while read -r line; do
    if ((! i++)); then
      printf "%s\n" "$line"
    else
      printf "%*s%s\n" "${#title}" " " "$line"
    fi
  done < <(fold -sw "$width" <<<"$*")
}

## push value to top of stack
# usage: push 'value'
push() {
  cow_targets[stack_size++]=$1
}

### run command as root
# usage: runasroot "command"
runasroot() {
  if sudo -v &>/dev/null && sudo -l "$@" &>/dev/null; then
    sudo "$@"
  else
    printf "%s " "Root"
    su -c "$(printf '%q ' "$@")"
  fi
}

### sets the color arrays based on options
set_colors() {
  case $color in
    always) iscolor=(1 1);;
    auto)
      if [[ -t 1 ]]; then
        iscolor[0]=1
      else
        iscolor[0]=0
      fi
      if [[ -t 2 ]]; then
        iscolor[1]=1
      else
        iscolor[1]=0
      fi
      ;;
    never) iscolor=(0 0);;
  esac
}

### build arrays to ignore packages
set_ignore_arrays() {
  local IFS=,
  if [[ ${ignore[*]} ]]; then
    cower+=(--ignore="${ignore[*]}")
    pacman+=(--ignore "${ignore[*]}")
  fi
  [[ ${repo_ignore[*]} ]] && cower+=(--ignorerepo="${repo_ignore[*]}")
  [[ ${group_ignore[*]} ]] && pacman+=(--ignoregroup "${group_ignore[*]}")
}

### full AUR upgrade for installed packages
upgrade() {
  local pkg
  ((check_git))  && gitcheck $(pacman -Qmqs -- -git$)
  coproc cowout { "${cower[@]}" --color=never -uq; } || die "cower error"
  while read -ru "${cowout[0]}" pkg; do
    targets+=("$pkg")
  done
}

### print usage information
usage() {
  cat <<'EOF'
meat OPERATION [OPTIONS] [TARGET [...]]

 Operations:
  -h, --help              display this help and exit
  -d, --download          download and install target(s) -- dependencies will be
                          automatically resolved
  -G, --git-db-update     updates the git database with new sums, without
                          actually installing anything (unstable).
  -i, --info              show info for target(s) -- pass twice for more detail
  -m, --msearch           show packages maintained by target(s)
  -s, --search            search AUR for target(s)
  -u, --update            check for updates against AUR and install them
  -U, --listupdates       check for updates against AUR and print them -- acts
                          the same way as cower -u

  only one operation may be specified.

 General options:
  -f, --force             no matter what happens, keep going -- using this
                          option is not recommended
  -g, --git-check         check and update checksums for git files. (unstable)
      --ignoregit PKG     ignore PKG when checking for git updates. PKG is a 
                          comma-separated list of packages. may be used more
                          than once
      --ignore PKG        ignore PKG when upgrading. PKG is a comma-separated
                          list of packages. may be used more than once
      --ignorerepo REPO   ignore a binary repo. REPO is a comma-separated list
                          of repositories. may be used more than once
      --nossl             do not use https connections
      --sign              sign the resulting packages with gpg. overrides the
                          setting in makepkg.conf(5)
      --nosign            do not create a signature for built packages. also
                          overrides makepkg.conf(5)
  -t, --target DIR        download to DIR, instead of "${TMPDIR:-/tmp}"
      --threads NUM       limit number of threads created to NUM
      --timeout NUM       specify connection timeout in seconds
      --check-all         when installing, prompts you to check every regular
                          file in the package directory instead of just the
                          PKGBUILD and .install files

 Output options:
  -c, --color[=WHEN]      use colored output. WHEN is `never, always, or auto'
      --debug             show debug output
      --format STRING     print package output according to STRING
  -q, --quiet             output less. if both -q and -v are used, each -q is
                          equivalent to removing a -v
  -v, --verbose           output more. may be specified multiple times for even
                          more information

 Targets:
  meat accepts a list of targets, space separated. If any target is the single
  character '-', it will also read a list of packages from stdin, one per line.
EOF
}

## print error message
# usage: warn 'verbosity' "messages"
warn() { 
  local v=$1; shift
  ((verbosity >= v)) || return
  if ((iscolor[1])); then
    printf "$yellow%s:$reset" "warning"
  else
    printf "$bold%s:$reset" "warning"
  fi
  printf " %s\n" "$1"; shift
  printf "\t %s\n" "$@"
} >&2

################################################################################
### main body of the program
trap cleanup 0

## check for controlling terminal
tput cols &>/dev/null || die "requires a controlling terminal"

## get configuration options
if [[ -r $config_file ]]; then
  source "$config_file"

  # check that options are of the correct format
  case $color in
    [01]) info 1 "the boolean value for color is deprecated." \
                 "please change the config to {always,auto,never}"
          if ((color)); then  
            color=auto
          else
            color=never
          fi
          ;;
    always|auto|never) :;;
    *) die "invalid value for \`color' in the config file: \`$color'";;
  esac
  set_colors
  [[ $nossl = [01] ]] ||
    die "invalid value for \`nossl' in the config file: \`$nossl'"
  [[ $check_all = [01] ]] ||
    die "invalid value for \`check_all' in the config file: \`$check_all'"
  [[ $timeout = *[![:digit:]]* ]] &&
    die "invalid value for \`timeout' in the config file: \`$timeout'"
  [[ $threads = *[![:digit:]]* ]] &&
    die "invalid value for \`threads' in the config file: \`$threads'"
  if [[ $download_dir != "$t_download_dir" ]]; then
    isuserddir=1
  fi
else
  if [[ -e $cache_dir/.firstrun ]]; then
    warn 1 "error sourcing config file \`$config_file'" \
           "reverting to default values." \
           "a default config can be found in \`/usr/share/meat'"
  else
    touch "$cache_dir/.firstrun"
    info 1 "a sample config file can be found in \`/usr/share/meat'"
           "please copy it to \`$config_file' and edit to taste"
  fi
fi


## parse options
# option string for splitting short options, any letter followed by a ':' takes
# a required argument
optstring=hdGimsuUfgt:cqv

# iterate over options, breaking -ab into -a -b. also turns -- into --endopts to
# avoid issues with things like '-o-', the '-' should not indicate the end of
# options, but be an invalid option (or the option's arg, such as wget -qO-)
unset options
while (($#)); do
  case $1 in
    # if option is of type -ab
    -[!-]?*)
      # loop over each character starting with the second
      for ((i=1; i<${#1}; i++)); do
        c=${1:i:1}
        
        # add current char to options
        options+=("-$c")

        # if option takes a required argument, and it's not the last char
        # make the rest of the string its argument
        if [[ $optstring = *"$c:"* && ${1:i+1} ]]; then
          options+=("${1:i+1}")
          break
        fi
      done
      ;;
    # add --endopts for --
    --) options+=(--endopts);;
    # otherwise, nothing special
    *) options+=("$1");;
  esac

  shift
done
# set new positional parameters to altered options
set -- "${options[@]}"
unset options

# build commands, set operations, etc
while [[ $1 = -?* ]]; do
  case $1 in
    # operations
    -h|--help|-\?) usage >&2; exit;;
    -d|--download) ((op_declared++)); download=1;;
    -i|--info) ((!info_level && op_declared++)); ((info_level++));;
    -m|--msearch) ((op_declared++)); msearch=1;;
    -s|--search) ((op_declared++)); search=1;;
    -u|--update) ((op_declared++)); update=1;;
    -U|--listupdates) ((op_declared++)); list_updates=1;;
    -G|--git-db-update) ((op_declared++)); git_db_update=1;;
    --fullupdate) ((op_declared++)); full_update=1;;

    # options
    -c|--color?(=*))
      if [[ $1 = --color=* ]]; then
        optarg=${1#*=}
        case $optarg in
          always|auto|never) color=$optarg;;
          *) die "invalid color type: $optarg";;
        esac
      else
        color=auto
      fi
      ;;
    -v|--verbose|--debug)
      if [[ $1 = --debug ]]; then
        verbosity=4
      else
        ((verbosity++))
      fi
      ;;
    -q|--quiet) ((verbosity > 0 && verbosity--));;
    -f|--force) force=1;;
    --format?(=*))
      if [[ $1 = --format=* ]]; then
        cower+=("--format" "${1#*=}")
      elif [[ $2 ]]; then
        cower+=("--format" "$2")
      else
        die "no format given for $1"
      fi
      ;;
    --ignore?(=*))
      if [[ $1 = --ignore=* ]]; then
        optarg=${1#*=}
      elif [[ $2 ]]; then
        optarg=$2
        shift
      else 
        die "no targets given for $1"
      fi
      [[ $optarg = *\ * ]] && die "invalid ignore list format for $1"

      IFS=, read -ra addignore <<<"$optarg"
      ignore+=("${addignore[@]}")
      ;;
    --ignorerepo?(=*))
      if [[ $1 = --ignorerepo=* ]]; then
        optarg=${1#*=}
      elif [[ $2 ]]; then
        optarg=$2
        shift
      else 
        die "no targets given for $1"
      fi
      [[ $optarg = *\ * ]] && die "invalid ignore list format for $1"

      IFS=, read -ra addignore <<<"$optarg"
      repo_ignore+=("${addignore[@]}")
      ;;
    --ignoregroup?(=*))
      if [[ $1 = --ignoregroup=* ]]; then
        optarg=${1#*=}
      elif [[ $2 ]]; then
        optarg=$2
        shift
      else 
        die "no targets given for $1"
      fi
      [[ $optarg = *\ * ]] && die "invalid ignore list format for $1"

      IFS=, read -ra addignore <<<"$optarg"
      group_ignore+=("${addignore[@]}")
      ;;
    --ignoregit?(=*))
      if [[ $1 = --ignoregit=* ]]; then
        optarg=${1#*=}
      elif [[ $2 ]]; then
        optarg=$2
        shift
      else 
        die "no targets given for $1"
      fi
      [[ $optarg = *\ * ]] && die "invalid ignore list format for $1"

      IFS=, read -ra addignore <<<"$optarg"
      git_ignore+=("${addignore[@]}")
      ;;
    --nossl) nossl=1;;
    --sign) sign=1; forcenosign=0;;
    --nosign) sign=0; forcenosign=1;;
    -t|--target?(=*))
      if [[ $1 = --target=* ]]; then
        optarg=${1#*=}
      elif [[ $2 ]]; then
        optarg=$2
        shift
      else
        die "no target specified for $1"
      fi
      download_dir=$optarg
      ;;
    --threads?(=*))
      if [[ $1 = --threads=* ]]; then
        optarg=${1#*=}
      elif [[ $2 = +([[:digit:]]) ]]; then
        optarg=$2
        shift
      else
        die "invalid number of threads: $2"
      fi
      threads=$optarg
      ;;
    --timeout)
      if [[ $1 = --timeout=* ]]; then
        optarg=${1#*=}
      elif [[ $2 = +([[:digit:]]) ]]; then
        optarg=$2
        shift
      else
        die "invalid value for timeout: $2"
      fi
      timeout=$optarg
      ;;
    -g|--git-check) check_git=1;;
    --check-all) check_all=1;;

    # end of options
    --endopts) shift; break;;

    # check for invalid options
    *)
      case $1 in
        --?*) die "invalid option: \`$1'";;
        *) die "invalid option: \`${1#-}'";;
      esac
      ;;
  esac

  shift
done


## this script should not be run as root!
((UID == 0)) &&
  die "do not run this script as root" \
      "you will prompted for the sudo/root password when needed"
  
# option error handling, format checking
if ((op_declared > 1)); then
  die 'only one operation may be specified'
elif ((! op_declared)); then
  die 'no operation specified'
fi
((git_check && ! update)) &&
  die '--git-check may only be used with -u (--update)'

# get targets, from stdin and positional parameters
while (($#)); do
  case $1 in
    -?*)
      die "$1: invalid package name" \
          "all operations and options must be specified before packages"
      ;;
    -)
      if [[ -t 0 ]]; then
        die "unable to read stdin for packages"
      else
        while read -r pkg; do
          targets+=("$pkg")
        done
      fi
      shift
      ;;
    *) targets+=("$1"); shift;;
  esac
done

# color info
if ((iscolor[0])); then
  type -P pacman-color &>/dev/null && pacman=(pacman-color) 
  cower+=(--color=always) 
else
  makepkg+=(-m)
  cower+=(--color=never)
fi

## finish building makepkg
if ((sign)); then
  makepkg+=(--sign)
elif ((forcenosign)); then
  makepkg+=(--nosign)
fi

## build cower and pacman base commands from options
# verbosity
### cower stuff has been commented out as a bug workaround
if ((verbosity >= 3)); then
  if ((verbosity >= 4)); then
    pacman+=(--debug)
    #cower+=(--debug)
  else
    pacman+=(-v)
    #cower+=(-v)
  fi
elif ((! verbosity)); then
  pacman+=(-q)
  cower+=(-q)
fi

((timeout != 10)) && cower+=(--timeout "$timeout")  # timeout
((nossl)) && cower+=(--nossl)                       # nossl
((threads != 10)) && cower+=("--threads" "$2")      # threads

# default download dir, pass to cower
cower+=(-t "$download_dir")

# packages to ignore
set_ignore_arrays

### files and directories
# make sure download dir exists
mkdir -p "$download_dir" ||
  die "download dir \`$download_dir' can't be created" \
      "check permissions"
# create cache dir, if not existing
mkdir -p "$cache_dir" ||
  die "cache directory \`$cache_dir' does not exist and could not be created"
# create git sums file, if not existing
touch "$git_sums_file" ||
  die "\`$git_sums_file' does not exist and could not be created"

### lock file handling
{
flock -n 9 || die "only one instance of meat may be running at a time." \
                  "if you are sure that another instance isn't running," \
                  "remove \`$lock_file'"
                
## finally, we get to do shit!!!
# --download, -d
if ((download)); then
  ((${#targets[@]})) || die "no targets specified"
  install_all

# --info, -i
elif ((info_level)); then
  ((${#targets[@]})) || die "no targets specified"
  if ((info_level == 1)); then
    "${cower[@]}" -i "${targets[@]}"
  else
    "${cower[@]}" -ii "${targets[@]}"
  fi

# --msearch, -m
elif ((msearch)); then
  ((${#targets[@]})) || die "no targets specified"
  "${cower[@]}" -m "${targets[@]}"

# --search, -s
elif ((search)); then
  ((${#targets[@]})) || die "no targets specified"
  "${cower[@]}" -s "${targets[@]}"

# --update, -u
elif ((update)); then
  upgrade
  install_all

# --listupdates, -U
elif ((list_updates)); then
  "${cower[@]}" -u "${targets[@]}"

# --git-db-update, -G
elif ((git_db_update)); then
  if ((${#targets[@]})); then
    gitcheck "${targets[@]}"
  else
    gitcheck $(pacman -Qmqs -- -git$)
  fi
  info 1 'git database updated successfully'

# --fullupdate
elif ((full_update)); then
  runasroot "${pacman[@]}" -Syu
  upgrade
  install_all

# ZOMG
else
  die "this should never been seen, report a bug"
fi
} 9>"$lock_file"

# vim: set ts=2 et
